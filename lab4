#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

class CVector2D {
    public:
        double x, y;
};

class IGeoFig {
    public:
        virtual double square() const = 0;
        virtual double perimeter() const = 0;
};

class IPhysObject {
    public:
        virtual double mass() const = 0;
        virtual CVector2D position() const = 0;
        virtual bool operator==(const IPhysObject& ob) const = 0;
        virtual bool operator<(const IPhysObject& ob) const = 0;
};

class IPrintable {
    public:
        virtual void draw() const = 0;
};

class IDialogInitiable {
    public:
        virtual void initFromDialog() = 0;
};

class BaseCObject {
    public:
        virtual const char* classname() const = 0;
        virtual unsigned int size() const = 0;
};

class EquilateralTriangle : public IGeoFig, public IPhysObject, public IPrintable, public IDialogInitiable, public BaseCObject {
    public:
    EquilateralTriangle() : a_(0), mass_(0), center_of_mass_({0,0}) {}
    EquilateralTriangle(double a, double mass, const CVector2D& center_of_mass) : a_(a), mass_(mass), center_of_mass_(center_of_mass) {}

    double square() const override {
        return sqrt(3) / 4 * pow(a_, 2);
    }

    double perimeter() const override {
        return 3 * a_;
    }

    double mass() const override {
        return mass_;
    }

    CVector2D position() const override {
        return center_of_mass_;
    }

    bool operator==(const IPhysObject& ob) const override {
        return mass_ == ob.mass();
    }

    bool operator<(const IPhysObject& ob) const override {
        return mass_ < ob.mass();
    }

    void draw() const override {
        std::cout << "Equilateral Triangle: side length = " << a_ << ", mass = " << mass_ << ", center of mass = (" << center_of_mass_.x << "," << center_of_mass_.y << ")" << std::endl;
    }

    void initFromDialog() override {
        std::cout << "Enter side length: ";
        std::cin >> a_;
        std::cout << "Enter mass: ";
        std::cin >> mass_;
        std::cout << "Enter x-coordinate of center of mass: ";
        std::cin >> center_of_mass_.x;
        std::cout << "Enter y-coordinate of center of mass: ";
        std::cin >> center_of_mass_.y;
    }

    const char* classname() const override {
        return "EquilateralTriangle";
    }

    unsigned int size() const override {
        return sizeof(*this);
    }

private:
    double a_;
    double mass_;
    CVector2D center_of_mass_;
};

class Ellipse : public IGeoFig, public IPhysObject, public IPrintable, public IDialogInitiable, public BaseCObject {
    public:
    Ellipse() : R_(0), r_(0), mass_(0), center_of_mass_({0,0}) {};
    Ellipse(double R, double r, double mass, const CVector2D& center_of_mass) : R_(R), r_(r), mass_(mass), center_of_mass_(center_of_mass) {}

    double square() const override {
        return 3.14 * R_ * r_;
    }

    double perimeter() const override {
        return 4 * 3.14 * R_ * r_ + (R_ - r_) * 2 * R_ + r_;
    }

    double mass() const override {
        return mass_;
    }

    CVector2D position() const override {
        return center_of_mass_;
    }

    bool operator==(const IPhysObject& ob) const override {
        return mass_ == ob.mass();
    }

    bool operator<(const IPhysObject& ob) const override {
        return mass_ < ob.mass();
    }

    void draw() const override {
        std::cout << "Ellipse: side length = " << R_ << "Ellipse: side width = " << r_ << ", mass = " << mass_ << ", center of mass = (" << center_of_mass_.x << "," << center_of_mass_.y << ")" << std::endl;
    }

    void initFromDialog() override {
        std::cout << "Enter side length: ";
        std::cin >> r_;
        std::cout << "Enter side width: ";
        std::cin >> R_;
        std::cout << "Enter mass: ";
        std::cin >> mass_;
        std::cout << "Enter x-coordinate of center of mass: ";
        std::cin >> center_of_mass_.x;
        std::cout << "Enter y-coordinate of center of mass: ";
        std::cin >> center_of_mass_.y;
    }

    const char* classname() const override {
        return "Ellipse";
    }

    unsigned int size() const override {
        return sizeof(*this);
    }

private:
    double R_;
    double r_;
    double mass_;
    CVector2D center_of_mass_;
};

struct Figures{
private:
    EquilateralTriangle a;
    Ellipse b;
public:
    Figures(EquilateralTriangle _a, Ellipse _b) : a(_a), b(_b){
        this->a = _a;
        this->b = _b;
    }
};

vector<EquilateralTriangle> fig1;
vector<Ellipse> fig2;
vector<pair<int mass, int pos>>;

int main(){
    int ch1;
    cout << "Choose shape: 1.EquilateralTriangle. 2.Ellipse." << endl;
    cin >> ch1;
    while (true){
        int sumMs = 0;
        int sumPr = 0;
        int sumCr = 0;
        int sumRAM = 0;
        if (ch1 == 1){
            EquilateralTriangle tr = *new EquilateralTriangle;
            tr.initFromDialog();
            fig1.push_back(tr);
        }
        
        
        if (ch1 == 2){
            Ellipse el = *new Ellipse();
            el.initFromDialog();
            fig2.push_back(el);
        }
        for(int i = 0; i < sizeof(fig1); i++){
            fig1[i].draw();
            sumMs+=fig1[i].mass();
            sumPr+=fig1[i].perimeter();
            //sumCr+=fig1[i].position();
            sumRAM+=fig1[i].size();
        }
        for (int i = 0; i < sizeof(fig2); i++){
            fig2[i].draw();
            sumMs+=fig2[i].mass();
            sumPr+=fig2[i].perimeter();
            //sumCr+=fig2[i].position();
            sumRAM+=fig2[i].size();
        }
        cout << sumPr << sumRAM << sumCr << sumMs << endl;
    }
    return 0;
}
